import React, { useState } from 'react';
import { useSelector } from 'react-redux';
import { motion, AnimatePresence } from 'framer-motion';
import { selectApiKey, selectIsAiConfigured } from '../../features/ai/aiSlice';
import { aiService } from '../../services/aiService';
import TypewriterText from './TypewriterText';
import AILoadingAnimation from './AILoadingAnimation';
import './AISummary.css';

function AISummary({ policy }) {
  const [summary, setSummary] = useState('');
  const [isLoading, setIsLoading] = useState(false);
  const [error, setError] = useState('');
  const [showSummary, setShowSummary] = useState(false);
  const [isTypingComplete, setIsTypingComplete] = useState(false);
  
  const apiKey = useSelector(selectApiKey);
  const isAIConfigured = useSelector(selectIsAiConfigured);

  const generateSummary = async () => {
    if (!isAIConfigured) {
      setError('Please configure your AI settings first');
      return;
    }

    setIsLoading(true);
    setError('');
    setIsTypingComplete(false);
    
    try {
      const generatedSummary = await aiService.generatePolicySummary(apiKey, policy);
      setSummary(generatedSummary);
      setShowSummary(true);
    } catch (err) {
      setError(err.message || 'Failed to generate summary');
    } finally {
      setIsLoading(false);
    }
  };

  const handleTypingComplete = () => {
    setIsTypingComplete(true);
  };

  if (!isAIConfigured) {
    return (
      <div className="ai-summary-container">
        <div className="ai-feature-disabled">
          <p>ü§ñ AI features are not configured. Please set up your API key in the settings.</p>
        </div>
      </div>
    );
  }

  // Animation variants for smooth transitions
  const containerVariants = {
    hidden: { opacity: 0, y: 20 },
    visible: { 
      opacity: 1, 
      y: 0,
      transition: { duration: 0.5 }
    },
    exit: { 
      opacity: 0, 
      y: -20,
      transition: { duration: 0.3 }
    }
  };

  return (
    <div className="ai-summary-container">
      <AnimatePresence mode="wait">
        {!showSummary && !isLoading && (
          <motion.button 
            key="generate-button"
            variants={containerVariants}
            initial="hidden"
            animate="visible"
            exit="exit"
            className="generate-summary-button"
            onClick={generateSummary}
            whileHover={{ scale: 1.05 }}
            whileTap={{ scale: 0.95 }}
          >
            ü§ñ Generate AI Summary
          </motion.button>
        )}

        {isLoading && (
          <motion.div
            key="loading"
            variants={containerVariants}
            initial="hidden"
            animate="visible"
            exit="exit"
          >
            <AILoadingAnimation />
          </motion.div>
        )}

        {error && (
          <motion.div 
            key="error"
            variants={containerVariants}
            initial="hidden"
            animate="visible"
            exit="exit"
            className="ai-error"
          >
            <p>‚ùå {error}</p>
          </motion.div>
        )}

        {showSummary && summary && !isLoading && (
          <motion.div 
            key="summary"
            variants={containerVariants}
            initial="hidden"
            animate="visible"
            exit="exit"
            className="ai-summary"
          >
            <div className="ai-summary-header">
              <h3>ü§ñ AI Summary</h3>
              <motion.button 
                className="regenerate-button"
                onClick={generateSummary}
                disabled={isLoading}
                title="Regenerate summary"
                whileHover={{ scale: 1.1, rotate: 180 }}
                whileTap={{ scale: 0.9 }}
                transition={{ duration: 0.3 }}
              >
                üîÑ
              </motion.button>
            </div>
            <div className="ai-summary-content">
              {isTypingComplete ? (
                summary
              ) : (
                <TypewriterText 
                  text={summary} 
                  delay={30}
                  onComplete={handleTypingComplete}
                />
              )}
            </div>
            <motion.div 
              className="ai-summary-footer"
              initial={{ opacity: 0 }}
              animate={{ opacity: isTypingComplete ? 1 : 0 }}
              transition={{ duration: 0.5 }}
            >
              Generated by AI ‚Ä¢ Results may vary
            </motion.div>
          </motion.div>
        )}
      </AnimatePresence>
    </div>
  );
}

export default AISummary;